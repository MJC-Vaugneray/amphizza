alertmanager:
  enabled: false

grafana:
  enabled: true
  plugins:
    - grafana-piechart-panel
  env:
    GF_SERVER_ROOT_URL: https://{{ .Release.Name }}.{{ .Values.root_dns }}
    GF_SERVER_DOMAIN: {{ .Release.Name }}.{{ .Values.root_dns }}
    GF_DEFAULT_INSTANCE_NAME: {{ .Release.Name }}
    GF_AUTH_ANONYMOUS_ENABLED: true
{{- if .Environment.Values | get "ingress-nginx.enabled" true }}
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: letsencrypt-prod
    path: /
    pathType: ImplementationSpecific
    hosts:
      - grafana.{{ .Release.Namespace }}.{{ .Values.root_dns }}
    tls:
      - secretName: tls-{{ .Release.Name }}-grafana
        hosts:
          - grafana.{{ .Release.Namespace }}.{{ .Values.root_dns }}
{{- end }}
  dashboards:
    default:
      nginx:
        url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/grafana/dashboards/nginx.json
      nginx-request-handling-performance:
        url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/grafana/dashboards/request-handling-performance.json
      cert-manager:
        gnetId: 11001
        datasource: Prometheus
      logs-per-app:
        gnetId: 13639
        datasource: loki
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default
  resources:
    limits:
      cpu: 900m
      memory: 512Mi
    requests:
      cpu: 50m
      memory: 256Mi

coreDns:
  enabled: false

kubeDns:
  enabled: true

prometheusOperator:
  admissionWebhooks:
    enabled: false
    patch:
      enabled: false
  tlsProxy:
    enabled: false
  resources:
    limits:
      cpu: 270m
      memory: 600Mi
    requests:
      cpu: 10m
      memory: 400Mi
  tls:
    enabled: false

prometheus:
  resources:
    limits:
      cpu: 400m
      memory: 400Mi
    requests:
      cpu: 300m
      memory: 300Mi
  prometheusSpec:
    ruleSelectorNilUsesHelmValues: false
    storageSpec: 
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 20Gi
    externalUrl: http://prometheus.{{ .Release.Namespace }}.{{ .Values.root_dns }}
    retention: 2d
    replicas: 1
    resources:
      requests:
        cpu: 200m
        memory: 1.6Gi
      limits:
        cpu: 400m
        memory: 2Gi
    logLevel: warn
    podMonitorSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false
#    additionalScrapeConfigs:
#      - job_name: dev-scanexporter
#        static_configs:
#        - targets: ["89.234.140.186:2112"]
#        metrics_path: /metrics
  ingress:
    enabled: false
  
prometheus-node-exporter:
  service:
    listenOnAllInterfaces: false
  resources:
    limits:
      cpu: 100m
      memory: 40Mi
    requests:
      cpu: 10m
      memory: 20Mi

kube-state-metrics:
  resources:
    limits:
      cpu: 150m
      memory: 80Mi
    requests:
      cpu: 10m
      memory: 30Mi

kubeControllerManager:
  enabled: false

kubeScheduler:
  enabled: false

defaultRules:
  create: true
  rules:
    kubeScheduler: false
    kubelet: false
    kubernetesSystem: false

